/*----- PROTECTED REGION ID(Snmp.h) ENABLED START -----*/
//=============================================================================
//
// file :        Snmp.h
//
// description : Include file for the Snmp class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: alessio $
//
// $Revision: 1.4 $
// $Date: 2015-10-19 14:12:15 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Snmp_H
#define Snmp_H

#include <tango.h>
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>

/*----- PROTECTED REGION END -----*/	//	Snmp.h

/**
 *  Snmp class description:
 *    
 */

namespace Snmp_ns
{
/*----- PROTECTED REGION ID(Snmp::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Snmp::Additional Class Declarations

class Snmp : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Snmp::Data Members) ENABLED START -----*/

	netsnmp_session *session;

/*----- PROTECTED REGION END -----*/	//	Snmp::Data Members

//	Device property data members
public:
	//	Version:	SNMP`s version used
	Tango::DevUShort	version;
	//	Hostname:	
	string	hostname;
	//	Community:	
	string	community;
	//	Username:	
	string	username;
	//	Passphrase:	
	string	passphrase;

	bool	mandatoryNotDefined;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Snmp(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Snmp(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Snmp(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~Snmp() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Snmp::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : Snmp::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command Get related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get(const Tango::DevVarLongStringArray *argin);
	virtual bool is_Get_allowed(const CORBA::Any &any);
	/**
	 *	Command Set related method
	 *	Description: 
	 *
	 *	@param argin 
	 */
	virtual void set(const Tango::DevVarLongStringArray *argin);
	virtual bool is_Set_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Snmp::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands() {}

/*----- PROTECTED REGION ID(Snmp::Additional Method prototypes) ENABLED START -----*/

private:
	void get_error(netsnmp_session *sess, string &ret);
	void throw_exception(const string &prepend = "");
	void _delete_device();
	void _init_device(netsnmp_session &ts);

/*----- PROTECTED REGION END -----*/	//	Snmp::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Snmp::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Snmp::Additional Classes Definitions

}	//	End of namespace

#endif   //	Snmp_H
