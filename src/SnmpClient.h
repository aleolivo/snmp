/*----- PROTECTED REGION ID(SnmpClient.h) ENABLED START -----*/
//=============================================================================
//
// file :        SnmpClient.h
//
// description : Include file for the SnmpClient class
//
// project :     Snmp proxy interface
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SnmpClient_H
#define SnmpClient_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	SnmpClient.h

/**
 *  SnmpClient class description:
 *    
 */

namespace SnmpClient_ns
{
/*----- PROTECTED REGION ID(SnmpClient::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	SnmpClient::Additional Class Declarations

class SnmpClient : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(SnmpClient::Data Members) ENABLED START -----*/

//	Add your own data members
	Tango::DeviceProxy *device_proxy;

/*----- PROTECTED REGION END -----*/	//	SnmpClient::Data Members

//	Device property data members
public:
	//	DeviceName:	
	string	deviceName;
	//	Timeout:	Connection timeout in milliseconds
	Tango::DevUShort	timeout;

	bool	mandatoryNotDefined;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SnmpClient(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SnmpClient(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SnmpClient(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~SnmpClient() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SnmpClient::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : SnmpClient::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : SnmpClient::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(SnmpClient::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

//void get(const string &oids, string &response);
void initialize();

void get(vector<string> &oids, vector<string> &replies);
void get(const string &oid, string &reply);

template<typename T> void get(const string &oid, T &reply)
{
	string str_reply;
	get(oid, str_reply);
	convert(str_reply, reply);
}
template<typename T> void get(vector<string> &oids, vector<T> &replies)
{
	vector<string> vs_replies(oids.size());
	get(oids, vs_replies);
	convert(vs_replies, replies);
}


void set(vector<string> &oids, vector<string> &values, vector<string> &expected_replies);
void set(const string &oid, const string &value, const string &expected_reply);

template<typename F, typename T> void set(const string &oid, const F &value, const T &expected_reply)
{
	string str_value, str_expected_reply;
	convert(value, str_value);
	convert(expected_reply, str_expected_reply);
	set(oid, str_value, str_expected_reply);
}
template<typename F, typename T> void set(vector<string> &oids, vector<F> &values, vector<T> &expected_replies)
{
	vector<string> vs_values(oids.size());
	vector<string> vs_expected_replies(oids.size());
	convert(values, vs_values);
	convert(expected_replies, vs_expected_replies);
	set(oids, vs_values, vs_expected_replies);
}


template<typename F, typename T> void convert(const F &reply, T &reply_converted)
{
	stringstream conv;
	conv << reply << flush;
	if (conv.fail())
		Tango::Except::throw_exception(
				"API_ConverionError",
				"Conversion fail " + conv.str(),
				"SnmpClient::convert()");
	conv >> reply_converted;
}
template<typename F, typename T> void convert(vector<F> &replies, vector<T> &replies_converted)
{
	for (size_t i = 0; i < replies.size(); i++ )
		convert(replies[i], replies_converted[i]);
}
template<typename F> void convert(const F &reply, string &reply_converted)
{
	stringstream conv;
	conv << reply << flush;
	if (conv.fail())
		Tango::Except::throw_exception(
				"API_ConverionError",
				"Conversion fail " + conv.str(),
				"SnmpClient::convert()");
	reply_converted = conv.str();
}

/*----- PROTECTED REGION END -----*/	//	SnmpClient::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SnmpClient::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	SnmpClient::Additional Classes Definitions

}	//	End of namespace

#endif   //	SnmpClient_H
